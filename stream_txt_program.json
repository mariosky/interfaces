{"_id": "/program/eee10c5a-f656-11ec-b939-0242ac122333", "uri": "/program/eee10c5a-f656-11ec-b939-0242ac122333", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para guardar una lista de productos a un archivo de texto", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Guarda productos a un archivo de texto", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "public class UnitTest1\n{\n    [Fact]\n    public void ProductClass()\n    {\n      Product p = new Product(\"AAA\", \"Desc\", 12.22m, 12,  23);\n      Assert.Equal(\"AAA\",p.code);\n    }\n\n    [Fact]\n    public void SaveProductsTxt()\n    {\n      List<Product> products = new();\n      products.Add(new Product(\"AAA\", \"DescA\", 12.22m, 12,  23));\n      products.Add(new Product(\"BAA\", \"DescB\", 12.22m, 12,  23));\n      products.Add(new Product(\"CAA\", \"DescC\", 12.22m, 12,  23));\n    \n      ProductDB.SaveProducts(products);\n\n      List<Product> productsFF = new();\n      productsFF = ReadProducts();\n      Assert.Equal(\"AAA\", productsFF[0].code);\n      Assert.Equal(\"BAA\", productsFF[1].code);\n      Assert.Equal(\"CAA\", productsFF[2].code);\n      \n    }\n\n    private static List<Product> ReadProducts()\n    {\n        List<Product> prods = new();\n        FileStream? fs = null;\n        try {\n            fs = new FileStream(\"products.txt\", FileMode.Open, FileAccess.Read);\n            using(StreamReader txtIn = new StreamReader(fs, Encoding.UTF8))\n            {\n                while (txtIn.Peek() != -1)\n                {\n                string? row = txtIn.ReadLine();\n                Console.WriteLine(row);\n                if (row is not null)\n                    {\n                    string?[] cols = row.Split(\"|\");\n                    string? code = cols[0];\n                    string? description = cols[1];\n                    decimal? price = decimal.Parse(cols[2]!);\n                    uint? likes = uint.Parse(cols[3]!);\n                    uint? department = uint.Parse(cols[4]!);\n                    prods.Add(new Product(code,description, price, likes, department));\n                    }\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n        return prods;\n    }\n\n}\n", "initial_code": "using System.Text;\n\npublic class Product\n{\n    public string? code;\n    public string? description;\n    public decimal? price;\n    // agrega el campo like\n    // agrega el campo department\n    // ambos son de tipo uint\n\n    // modifica el constructor para inicializar los \n    // campos de like y department  \n    public Product(string? c, string? d, decimal? p)\n    {\n        code = c; description = d; price = p; \n    }\n}\n\npublic class ProductDB\n{\n    public static void SaveProducts(List<Product> products)\n    {\n        FileStream fs = null;\n        try {\n            // Crea el FileStream y asignalo a fs \n            // Vamos a crear el archivo y escribir \n            // fs = \n            using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n            {\n                foreach (var p in products)\n                {\n                    // Utiliza los m\u00e9todos Write y WriteLine para \n                    // Agregar los productos al archivo\n                    // Utiliza el caracter de barra vertical como separador\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n    }\n}\n", "instructions": "<h3>Guarda objetos de la clase Product a un archivo de texto</h3>\n<p>Debes completar el programa, siguiendo estos pasos:</p>\n<ol>\n<li>\n<p>Debes agregar dos nuevos campos a la clase producto\n   ambos son enteros sin signo (<code>uint</code>) : <code>likes</code> y <code>department</code>.\n   Es importante que los agregues en ese orden.</p>\n</li>\n<li>\n<p>Debes crear una instancia de <code>FileStream</code> y asignarl a <code>fs</code>.</p>\n</li>\n<li>\n<p>Utilizando el separador de barra vertical <code>|</code> agrega una l\u00ednea \n   por cada objeto, no se te olvide agregar un salto de l\u00ednea.</p>\n</li>\n</ol>\n<p>Observa la manera en la que se desecha el archivo, esto \nes distinto a lo que vimos en clase.</p>\n<p>Puedes guardar tu c\u00f3digo temporamente en\n<a href=\"https://gist.github.com/\" target=\"_blank\">GitHub Gist</a></p>\n<hr />\n<h4>Notas:</h4>\n<p>Para guardar el estado de los productos, utilizaremos una estrategia sencilla \npara separar los campos, vamos a utilizar un caracter especial como separador.\nEn este caso utilizaremos el caracter barra vertical <code>|</code>. Hay otras soluciones\nest\u00e1ndar, por ejemplo, los archivos separados por coma, pero queremos una soluci\u00f3n b\u00e1sica.</p>\n<p>A continuaci\u00f3n se muestra la implementaci\u00f3n del m\u00e9todo <code>SaveProducts</code>. Es un m\u00e9todo\nest\u00e1tico, y solo recibe como par\u00e1metro la lista con los productos que vamos a \nguardar al archivo. En esta primera prueba hemos dejado el nombre del archivo fijo (<em>hard-coded</em>) \ncomo <code>\"products.txt\"</code>, pero es mejor que este valor se reciba como par\u00e1metro (se dejar\u00e1 como ejercicio). </p>\n<p><pre class=\"highlight\"><code class=\"language-csharp\">class ProductDB\n{\n   public static void SaveProducts(List&lt;Product&gt; products)\n   {\n    // Declaramos el FileStream fuera del bloque try \n    // para que sea visible en todo el bloque del m\u00e9todo\n    FileStream fs = null;\n    try {\n       // Instanciamos un objeto de FileStream\n       // Vamos a crear el archivo y vamos a escribir en el\n       fs = new FileStream(\"products.txt\", FileMode.Create, \n                                                   FileAccess.Write);\n       // Utilizamos 'using' para que se llame a Dispose implicitamente \n       using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n       {\n          foreach (var p in products)\n          {\n              // Escribimos una l\u00ednea con los campos de cada objeto \n              // Separados por un '|'\n              txtOut.WriteLine($\"{p.code}|{p.description}|{p.price}\");\n          }\n       }\n   }\n   // Optamos por llamar explicitamete al Dispose de fs, como ejemplo\n   finally {\n       // Solo se ejecuta si la referencia no es nula\n      if (fs != null)\n          fs.Dispose();\n    }\n  }\n}</code></pre>\nEn el ejemplo utilizamos una instancia de <code>FileStream</code> para especificar el modo y tipo de acceso \nque utilizaremos al manipular el archivo. Esto lo especificamos utilzando las enumeraciones \n<code>FileMode</code> y <code>FileAccess</code>. </p>\n<p>Las opciones para el modo de apertura <code>FileMode</code> son: </p>\n<table>\n<thead>\n<tr>\n<th>Valor</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Append</code></td>\n<td>Abre el archivo si existe y se posiciona al final de este. Si el archivo no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Create</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se sobrescribe.</td>\n</tr>\n<tr>\n<td><code>CreateNew</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>Open</code></td>\n<td>Abre un archivo existente. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>OpenOrCreate</code></td>\n<td>Abre el archivo si existe. Si no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Truncate</code></td>\n<td>Abre un archivo existente y lo trunca a cero bytes. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n</tbody>\n</table>\n<p>Las opciones para el tipo de acceso son <code>FileAccess.Read</code>, <code>FileAccess.Write</code> y <code>FileAccess.ReadWrite</code>, \nindicando las operaciones que vamos a hacer en el archivo. </p>\n<p>A continuaci\u00f3n se muestra otra versi\u00f3n donde se utiliza la construcci\u00f3n <code>using</code> para ambas instancias.</p>\n<pre class=\"highlight\"><code class=\"language-csharp\">public static void SaveProducts(List&lt;Product&gt; products)\n{\n  using(FileStream fs = new FileStream(\"products.txt\", \n                                        FileMode.Create, FileAccess.Write))\n  using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n  {\n    foreach (var p in products)\n    {\n      txtOut.WriteLine($\"{p.code}|{p.description}|{p.price}\");\n    }\n  }\n}</code></pre>", "reg_exp": ""}