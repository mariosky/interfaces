{"_id": "/activity/733edf66-8219-81e7-9265-3401663b8331", "uri": "/activity/733edf66-8219-81e7-9265-3401663b8331", "publisher": null, "level": "intermedio", "rights": "Attribution 4.0 International", "description": "Persistencia utilizando streams binarios, BinaryStream", "icon": "file", "author": "Mario Garc\u00eda Valdez", "tags": ["clase", "csharp"], "image_url": null, "title": "Operaciones b\u00e1sicas con archivos binarios", "type": "text", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "author_image": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "content": "<h3>Archivos de Texto</h3>\n<p>Todos los archivos almacenan datos que consisten en una secuencia de bytes. \nEsto nos permite almacenar en archivos tipo de informaci\u00f3n digital como \nim\u00e1genes, videos, texto y hasta programas ejecutables. El detalle est\u00e1 en la \nmanera en la que interpretamos a los bytes que almacenamos en el archivo.</p>\n<p>En caso de \nlos archivos de texto, exiten varias codificaciones que asocian a los caracteres\nde un alfabeto a una representaci\u00f3n binaria, por ejemplo, las codificaciones ASCII o \nUTF-8. Decimos que un archivo de texto (tambi\u00e9n les llamamos de texto plano) incluye solo \ntexto codificado en alg\u00fan est\u00e1ndar. No incluye bytes que representen \ndirectamente im\u00e1genes u otro tipo de datos. Los programadores utilizamos editores de \ntexto como <em>vscode</em>, <em>vim</em>, <em>emacs</em> o <em>notepad++</em> para programar, ya que el c\u00f3digo fuente\nde nuestros programas es puro texto. Un archivo de texto tambi\u00e9n incluye caracteres que no\nse muestran en el editor directamente, por ejemplo un salto de l\u00ednea o una tabulaci\u00f3n. \nLa ventaja que tienen los archivos de texto al limitar el tipo de datos que contienen,\nes que pueden leerse de manera universal, no importa el sistema operativo, o el tipo de \nprograma con interfaz gr\u00e1fica o directamente en la consola de comandos, tenemos muchas \nherramientas para leer y editar el texto. Adem\u00e1s de la codificaci\u00f3n, tambi\u00e9n hay \nformatos de almacenamiento que se basan en texto, por ejemplo los archivos de html, xml, json\no yaml. </p>\n<h3>Archivos Binarios</h3>\n<p>Por otro lado, los archivos binarios no tienen la limitaci\u00f3n de contener solamente texto.\nAlgunos bytes dentro del archivo pueden codificar texto, pero otro pueden representar \nuna imagen, o tipos de dato b\u00e1sicos definidos en un lenguaje. Por ejemplo, hablando de C#,\nsi queremos almacenar el valor <code>23.1m</code> de tipo decimal, vimos como al guardarlo en un archivo\nde texto, debemos convertirlo a <code>string</code> (esto se hace internamente por el m\u00e9todo <code>ToString()</code>). \nY al leerlo debemos hacer la conversi\u00f3n de regreso de <code>string</code> a <code>decimal</code>. En el caso de \nun archivo binario, esto no es necesario porque el podemos grabar directamente los bytes que \nrepresentan al decimal. De la misma manera, al leer, los bytes ya representan al valor decimal. </p>\n<p>Almacenar datos a un archivo binario es m\u00e1s f\u00e1cil que a uno de texto, pues no\ntenemos que hacer ninguna conversi\u00f3n de tipos. Todo se guarda con los mismos\nbytes que el tipo dato en C#. \u00bfUn entero?, pues se guarda directamente como\nentero, m\u00e1s correctamente, su representaci\u00f3n binaria.  </p>\n<p>Como ahora tenemos la posibilidad de almacenar bytes con distintos significados, perdemos la \nventaja de leer todo de la misma manera. Ya no podemos tener un solo m\u00e9todo <code>Read()</code> o <code>ReadLine()</code>,\nesto era posible porque en el archivo todo es texto (<code>string</code>). Ahora debemos ajustar la lectura del \nstream al tipo de dato que esperamos. \u00bfEs un decimal o un entero?, \u00bfes entero de 16 o 32 bits?, cada \ntipo de dato b\u00e1sico requiere de un procesamiento algo diferente. Por esta raz\u00f3n, al leer archivos \nbinarios, debemos utilizar m\u00e9todos especializados para cada tipo b\u00e1sico, por ejemplo, para un\n<code>Decimal</code> utilizamos <code>ReadDecimal()</code> y para un <code>Int16</code> usamos <code>ReadInt16</code>.</p>\n<h3>BinaryWriter y BinaryReader</h3>\n<p>Al igual que en la contraparte de archivos de texto, utilizamos dos clases derivadas de <code>Stream</code>, \nlas cuales se especializan en streams binarios. Utilizamos estas clases en conjunto con la \nclase <code>FileStream</code> de la misma manera que antes. Vamos el ejemplo de la documentaci\u00f3n de C#:</p>\n<p><div class=\"highlight\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">System.IO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">System.Text</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ConsoleApplication</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">fileName</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;AppSettings.dat&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">Main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">WriteDefaultValues</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DisplayValues</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">WriteDefaultValues</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">writer</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">BinaryWriter</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"m\">1.250F</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"s\">@&quot;c:\\Temp&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">DisplayValues</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">aspectRatio</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">tempDirectory</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">autoSaveTime</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">showStatusBar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">Exists</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Open</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">BinaryReader</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">aspectRatio</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ReadSingle</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tempDirectory</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ReadString</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">autoSaveTime</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ReadInt32</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">showStatusBar</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ReadBoolean</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Aspect ratio set to: &quot;</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">aspectRatio</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Temp directory is: &quot;</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">tempDirectory</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Auto save time set to: &quot;</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">autoSaveTime</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Show status bar: &quot;</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">showStatusBar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\nEl ejemplo muestra un caso pr\u00e1ctico donde queremos almacenar la configuraci\u00f3n de nuestro \nprograma en un archivo binario. Para indicar que es un archivo binario en este caso le \npondremos la extensi\u00f3n <code>.dat</code>. El nombre del archivo es:\n<div class=\"highlight\"><pre><span></span><code>const string fileName = &quot;AppSettings.dat&quot;;\n</code></pre></div>\nEmpecemos por almacenar los datos, eso se hace en el m\u00e9todo <code>WriteDefaultValues</code>. Como\nvemos al igual que en el caso de los archivos de texto, creamos el <code>BinaryStream</code> tomando \ncomo primer par\u00e1metro una instancia del <code>FileStream</code> con el archivo d\u00f3nde vamos guardar los datos.\nComo vemos, no es necesario utilizar alg\u00fan mecanismo para separar los datos, c\u00f3mo un separador u \nalgo similar.</p>\n<p>Para la lectura ahora debemos utilizar el m\u00e9todo de <code>BinaryReader</code> espec\u00edfico para el tipo de\ndato que vamos a leer. Vemos que aun en el caso binario especificamos el tipo de codificaci\u00f3n \n<code>Encoding.UTF8</code>, pues recordemos que los archivos binarios tambi\u00e9n pueden incluir texto. \nPara el caso del tipo de dato <code>float</code>, se utiliza el m\u00e9todo <code>ReadSingle</code> el cual lee un \nflotante de 4 bytes, a esto se le conoce como <code>single precision</code>.  </p>\n<h4>Referencias</h4>\n<ul>\n<li>\n<p>Algunas partes son adaptadas del material de <a href=\"https://github.com/dotnet/docs/\">dotnet/docs</a> \ncon licencia <strong><em>Attribution 4.0 International</em></strong>, este material se comparte con la misma licencia. </p>\n</li>\n<li>\n<p>Streams en <a href=\"https://learn.microsoft.com/es-mx/dotnet/api/system.io.stream?view=net-7.0\">dotnet/docs</a></p>\n</li>\n</ul>"}