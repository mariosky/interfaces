{"_id": "/activity/733edf66-2901-11e7-9265-3401663b8331", "uri": "/activity/733edf66-2901-11e7-9265-3401663b8331", "publisher": null, "level": "intermedio", "rights": "Attribution 4.0 International", "description": "Persistencia en archivos de texto, clases FileStream y StreamWriter", "icon": "file", "author": "Mario Garc\u00eda Valdez", "tags": ["clase", "csharp"], "image_url": null, "title": "Operaciones b\u00e1sicas en archivos de texto", "type": "text", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "author_image": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "content": "<h3>C\u00f3mo almacenar objetos a un archivo de texto</h3>\n<p>Para escribir a un archivo de texto vamos a utilizar dos clases\ncomplementarias: <code>FileStream</code> y <code>StreamWriter</code>, estas se utilizan para realizar\noperaciones de escritura en archivos en C#. Aunque ambas se pueden utilizar de\nmanera independiente, existen algunas diferencias clave entre ellas en\nt\u00e9rminos de su funcionalidad y manera de utilizarse:</p>\n<ol>\n<li>\n<p>Funcionalidad:</p>\n<ul>\n<li>\n<p>FileStream: es una clase que se utiliza para leer y escribir <strong>bytes</strong> en\n  un archivo. Proporciona m\u00e9todos para realizar operaciones de lectura y\n  escritura a bajo nivel manipulando los bytes. Implementa los m\u00e9todos Read,\n  Write y Seek.</p>\n</li>\n<li>\n<p>StreamWriter: proporciona m\u00e9todos para escribir cadenas y caracteres a un\n  archivo, realizando tambi\u00e9n tareas de codificaci\u00f3n y formato. A\n  <code>StreamWriter</code> se considera una clase de nivel superior, ya que no opera \n  en el \u00e1mbito de los bytes y por lo mismo es m\u00e1s f\u00e1cil de utilizar.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Uso:</p>\n<ul>\n<li>FileStream: Primero necesitamos crear una\n     instancia de la clase <code>FileStream</code> y especificando como par\u00e1metro el archivo con el que \n     vamos a trabajar. Luego, podemos utilizar los\n     m\u00e9todos para leer o escribir bytes en el\n     archivo. Vemos la operaci\u00f3n a bajo nivel en el ejemplo a continuaci\u00f3n. Cuando leemos, lo hacemos\n     a un arreglo de bytes y al escribir \n     debemos especificar par\u00e1metros adicionales de posici\u00f3n y tama\u00f1o del arreglo. </li>\n</ul>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FileStream</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">&quot;archivo.txt&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kt\">byte</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"s\">&quot;Ejemplo&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>StreamWriter: Con <code>StreamWriter</code> simplemente utilizamos el m\u00e9todo <code>WriteLine</code> y pasamos \n   directamente el objeto que deseamos almacenar. De manera similar a cuando escribimos en consola\n   internamente se llama al m\u00e9todo <code>ToString</code> para grabar el texto:</li>\n</ul>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">StreamWriter</span><span class=\"w\"> </span><span class=\"n\">sw</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">StreamWriter</span><span class=\"p\">(</span><span class=\"s\">&quot;archivo.txt&quot;</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sw</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Ejemplo de texto.&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</li>\n<li>\n<p>Caracter\u00edsticas adicionales:</p>\n<ul>\n<li>\n<p>FileStream: Como <code>FileStream</code> trabaja a bajo nivel, nos permite realizar\n operaciones m\u00e1s avanzadas, como leer o escribir en ubicaciones espec\u00edficas\n del archivo utilizando el m\u00e9todo <code>Seek</code>.</p>\n</li>\n<li>\n<p>StreamWriter: Nos proporciona m\u00e9todos espec\u00edficos para escribir texto, y\n podemos especificar el formato de codificaci\u00f3n para el archivo, el uso de\n una memoria intermedia para almacenar datos antes de escribirlos en el\n archivo y podemos utilizar el m\u00e9todo <code>WriteLine</code>.</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4>Uso de <code>FileStream</code> y <code>StreamWriter</code></h4>\n<p>Para este ejemplo vamos a utilizar <code>FileStream</code> y <code>StreamWriter</code> para almacenar en \nun archivo de texto objetos de la clase <code>Producto</code>:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Product</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">description</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">decimal</span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nf\">Product</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">decimal</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">description</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>La clase incluye dos campos p\u00fablicos tipo <code>string</code> y un decimal. Vamos \na crear una clase de utiler\u00eda la cual llamaremos <code>ProductDB</code>, en ella \nvamos a agregar los m\u00e9todos est\u00e1ticos para guardar y leer instancias de <code>Producto</code>\na archivos de texto.</p>\n<p>Para guardar el estado de los productos, utilizaremos una estrategia sencilla \npara separar los campos, vamos a utilizar un caracter especial como separador.\nEn este caso utilizaremos el caracter barra vertical <code>|</code>. Hay otras soluciones\nest\u00e1ndar, por ejemplo, los archivos separados por coma, pero queremos una soluci\u00f3n b\u00e1sica.</p>\n<p>A continuaci\u00f3n se muestra la implementaci\u00f3n del m\u00e9todo <code>SaveProducts</code>. Es un m\u00e9todo\nest\u00e1tico, y solo recibe como par\u00e1metro la lista con los productos que vamos a \nguardar al archivo. En esta primera prueba hemos dejado el nombre del archivo fijo (<em>hard-coded</em>) \ncomo <code>\"products.txt\"</code>, pero es mejor que este valor se reciba como par\u00e1metro (se dejar\u00e1 como ejercicio). </p>\n<p><div class=\"highlight\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ProductDB</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">SaveProducts</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">Product</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"n\">products</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Declaramos el FileStream fuera del bloque try </span>\n<span class=\"w\">    </span><span class=\"c1\">// para que sea visible en todo el bloque del m\u00e9todo</span>\n<span class=\"w\">    </span><span class=\"n\">FileStream</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">null</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"c1\">// Instanciamos un objeto de FileStream</span>\n<span class=\"w\">       </span><span class=\"c1\">// Vamos a crear el archivo y vamos a escribir en el</span>\n<span class=\"w\">       </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">&quot;products.txt&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\">                                                   </span><span class=\"n\">FileAccess</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"c1\">// Utilizamos &#39;using&#39; para que se llame a Dispose implicitamente </span>\n<span class=\"w\">       </span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"n\">StreamWriter</span><span class=\"w\"> </span><span class=\"n\">txtOut</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">StreamWriter</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">512</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"k\">foreach</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">products</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"c1\">// Escribimos una l\u00ednea con los campos de cada objeto </span>\n<span class=\"w\">              </span><span class=\"c1\">// Separados por un &#39;|&#39;</span>\n<span class=\"w\">              </span><span class=\"n\">txtOut</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">$&quot;{p.code}|{p.description}|{p.price}&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// Optamos por llamar explicitamete al Dispose de fs, como ejemplo</span>\n<span class=\"w\">   </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"c1\">// Solo se ejecuta si la referencia no es nula</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"p\">!=</span><span class=\"w\"> </span><span class=\"k\">null</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">Dispose</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\nEn el ejemplo utilizamos una instancia de <code>FileStream</code> para especificar el modo y tipo de acceso \nque utilizaremos al manipular el archivo. Esto lo especificamos utilzando las enumeraciones \n<code>FileMode</code> y <code>FileAccess</code>. </p>\n<p>Las opciones para el modo de apertura <code>FileMode</code> son: </p>\n<table>\n<thead>\n<tr>\n<th>Valor</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Append</code></td>\n<td>Abre el archivo si existe y se posiciona al final de este. Si el archivo no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Create</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se sobrescribe.</td>\n</tr>\n<tr>\n<td><code>CreateNew</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>Open</code></td>\n<td>Abre un archivo existente. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>OpenOrCreate</code></td>\n<td>Abre el archivo si existe. Si no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Truncate</code></td>\n<td>Abre un archivo existente y lo trunca a cero bytes. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n</tbody>\n</table>\n<p>Las opciones para el tipo de acceso son <code>FileAccess.Read</code>, <code>FileAccess.Write</code> y <code>FileAccess.ReadWrite</code>, \nindicando las operaciones que vamos a hacer en el archivo. </p>\n<p>A continuaci\u00f3n se muestra otra versi\u00f3n donde se utiliza la construcci\u00f3n <code>using</code> para ambas instancias.</p>\n<p><div class=\"highlight\"><pre><span></span><code><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">SaveProducts</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">Product</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"n\">products</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"n\">FileStream</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">&quot;products.txt&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\">                                        </span><span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileAccess</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"n\">StreamWriter</span><span class=\"w\"> </span><span class=\"n\">txtOut</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">StreamWriter</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">512</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">foreach</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">products</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">txtOut</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">$&quot;{p.code}|{p.description}|{p.price}&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\nPara probar nuestras clases vamos a crear una lista de productos y \nllamaremos el m\u00e9todo <code>ProductDB.SaveProducts</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Program</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">Main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">Product</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"n\">productos</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">productos</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Product</span><span class=\"p\">(</span><span class=\"s\">&quot;AAX&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Atari 2600&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">190.99</span><span class=\"n\">m</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">productos</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Product</span><span class=\"p\">(</span><span class=\"s\">&quot;BBX&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;NES&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">290.99</span><span class=\"n\">m</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">productos</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Product</span><span class=\"p\">(</span><span class=\"s\">&quot;CCX&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Game Boy&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">90.99</span><span class=\"n\">m</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">ProductDB</span><span class=\"p\">.</span><span class=\"n\">SaveProducts</span><span class=\"p\">(</span><span class=\"n\">productos</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Al ejecutar el c\u00f3digo deber\u00edamos crear un archivo llamado <code>products.txt</code> que est\u00e1\nen la ra\u00edz del proyecto y tiene los siguientes datos:</p>\n<div class=\"highlight\"><pre><span></span><code>AAX|Atari 2600|190.99\nBBX|NES|290.99\nCCX|Game Boy|90.99\n</code></pre></div>\n<h4>Referencias</h4>\n<ul>\n<li>\n<p>Algunas partes son adaptadas del material de <a href=\"https://github.com/dotnet/docs/\">dotnet/docs</a> \ncon licencia <strong><em>Attribution 4.0 International</em></strong>, este material se comparte con la misma licencia. </p>\n</li>\n<li>\n<p>Streams en <a href=\"https://learn.microsoft.com/es-mx/dotnet/api/system.io.stream?view=net-7.0\">dotnet/docs</a></p>\n</li>\n</ul>"}