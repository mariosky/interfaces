{"_id": "/program/eee10c5a-f656-11ec-b939-0242ac122333", "uri": "/program/eee10c5a-f656-11ec-b939-0242ac122333", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para guardar una lista de productos a un archivo de texto", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Guarda productos a un archivo de texto", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "namespace Service.Tests;\nusing System.Text;\n\npublic class UnitTest1\n{\n    [Fact]\n    public void ProductClass()\n    {\n      Service.Product p = new Service.Product(\"AAA\", \"Desc\", 12.22m, 12,  23);\n      Assert.Equal(\"AAA\",p.code);\n    }\n\n    [Fact]\n    public void SaveProductsTxt()\n    {\n      List<Product> products = new();\n      products.Add(new Service.Product(\"AAA\", \"DescA\", 12.22m, 12,  23));\n      products.Add(new Service.Product(\"BAA\", \"DescB\", 12.22m, 12,  23));\n      products.Add(new Service.Product(\"CAA\", \"DescC\", 12.22m, 12,  23));\n    \n      ProductDB.SaveProducts(products);\n\n      List<Product> productsFF = new();\n      productsFF = ReadProducts();\n      Assert.Equal(\"AAA\", productsFF[0].code);\n      Assert.Equal(\"BAA\", productsFF[1].code);\n      Assert.Equal(\"CAA\", productsFF[2].code);\n      \n    }\n\n    private static List<Product> ReadProducts()\n    {\n        List<Product> prods = new();\n        FileStream? fs = null;\n        try {\n            fs = new FileStream(\"products.txt\", FileMode.Open, FileAccess.Read);\n            using(StreamReader txtIn = new StreamReader(fs, Encoding.UTF8))\n            {\n                while (txtIn.Peek() != -1)\n                {\n                string? row = txtIn.ReadLine();\n                if (row is not null)\n                    {\n                    string?[] cols = row.Split(\"|\");\n                    string? code = cols[0];\n                    string? description = cols[1];\n                    decimal? price = decimal.Parse(cols[2]!);\n                    uint? likes = uint.Parse(cols[3]!);\n                    uint? department = uint.Parse(cols[3]!);\n                    prods.Add(new Product(code,description, price, likes, department));\n                    }\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n        return prods;\n    }\n\n}\n", "initial_code": "namespace Service;\nusing System.Text;\n\npublic class Product\n{\n    public string? code;\n    public string? description;\n    public decimal? price;\n    // agrega el campo like\n    // agrega el campo department\n    // ambos son de tipo uint\n\n    // modifica el constructor para inicializar los \n    // campos de like y department  \n    public Product(string? c, string? d, decimal? p)\n    {\n        code = c; description = d; price = p; \n    }\n}\n\npublic class ProductDB\n{\n    public static void SaveProducts(List<Product> products)\n    {\n        FileStream fs = null;\n        try {\n            // Crea el FileStream y asignalo a fs \n            // Vamos a crear el archivo y escribir \n            // fs = \n            using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n            {\n                foreach (var p in products)\n                {\n                    // Utiliza los m\u00e9todos Write y WriteLine para \n                    // Agregar los productos al archivo\n                    // Utiliza el caracter de barra vertical como separador\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n    }\n}\n", "instructions": "<h3>Guarda objetos de la clase Product a un archivo de texto</h3>\n<p>Debes completar el programa, siguiendo estos pasos:</p>\n<ol>\n<li>\n<p>Debes agregar dos nuevos campos a la clase producto\n   ambos son enteros sin signo (<code>uint</code>) : <code>likes</code> y <code>department</code>.\n   Es importante que los agregues en ese orden.</p>\n</li>\n<li>\n<p>Debes crear una instancia de <code>FileStream</code> y asignarl a <code>fs</code>.</p>\n</li>\n<li>\n<p>Utilizando el separador de barra vertical <code>|</code> agrega una l\u00ednea \n   por cada objeto, no se te olvide agregar un salto de l\u00ednea.</p>\n</li>\n</ol>\n<p>Observa la manera en la que se desecha el archivo, esto \nes distinto a lo que vimos en clase.</p>", "reg_exp": ""}