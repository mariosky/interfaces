{"_id": "/program/11e10c5a-f656-11ec-b939-0242ac122334", "uri": "/program/11e10c5a-f656-11ec-b939-0242ac122334", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para guardar una lista de productos a un archivo de binario", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Guarda productos a un archivo binario", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "\npublic class UnitTest1\n{\n    [Fact]\n    public void ConstructorClass()\n    {\n      Alumno p = new Alumno(1, \"NombreA\", 90.22m);\n      Assert.Equal(\"NombreA\",p.nombre);\n      Assert.Equal(1, p.id);\n      Assert.Equal(90.22,p.calificaci\u00f3n);\n    }\n\n    [Fact]\n    public void SaveAlumnosTxt()\n    {\n      List<Alumno> alumnos = new();\n      alumnos.Add(new Alumno(1, \"NombreA\", 82.22m));\n      alumnos.Add(new Alumno(2, \"NombreB\", 92.22m));\n      alumnos.Add(new Alumno(3, \"NombreC\", 32.22m));\n    \n      AlumnoDB.SaveAlumnosBin(alumnos, \"alumnos.dat\");\n\n      List<Alumno> alumnosFF = new();\n      alumnosFF = ReadAlumnosBin();\n      Assert.Equal(1, alumnosFF[0].id);\n      Assert.Equal(2, alumnosFF[1].id);\n      Assert.Equal(3, alumnosFF[2].id);\n      \n    }\n\n    private static List<Alumno> ReadAlumnosBin()\n    {\n        List<Alumno> alumnos = new();\n        FileStream? fs = null;\n        try {\n            fs = new FileStream(\"alumnos.dat\", FileMode.Open, FileAccess.Read);\n            using(BinaryReader binIn = new BinaryReader(fs, Encoding.UTF8))\n            {\n                while (binIn.PeekChar() != -1)\n                {\n                    int id = binIn.ReadInt32(); \n                    string name = binIn.ReadString();\n                    decimal? cali= binIn.ReadDecimal();\n                    Console.Write($\"{id}{name}{cali}\");\n                    alumnos.Add(new Alumno(id, name, cali));\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n        return alumnos;\n    }\n\n}\n", "initial_code": "using System.Text;\n\npublic class Alumno\n{\n    public int id;\n    public string nombre;\n    public decimal? calificaci\u00f3n;\n\n    // Agrega el constructor\n\n    public Alumno(int id, string n, decimal? c)\n    {\n        this.id = id; this.nombre = n; this.calificaci\u00f3n=c;\n    }\n}\n\npublic class AlumnoDB\n{\n    public static void SaveAlumnosBin(List<Alumno> alumnos, string path)\n    {\n            // El nombre del archivo nos lo env\u00edan en el par\u00e1metro path\n            // El archivo puede ser que exista previamente\n            using(FileStream fs = new FileStream(path, FileMode.OpenOrCreate, \n                        FileAccess.Write))\n            using(BinaryWriter binOut = new BinaryWriter(fs, Encoding.UTF8))\n            {\n                foreach (var p in alumnos)\n                {\n                    // Utiliza los m\u00e9todos Write y WriteLine para \n                    // Agregar los productos al archivo\n                    binOut.Write(p.id);\n                    binOut.Write(p.nombre);\n                    binOut.Write(p.calificaci\u00f3n);\n                }\n            }\n    }\n}\n", "instructions": "<h3>Guarda objetos de la clase Product a un archivo de texto</h3>\n<p>Sigue estos pasos para completar el programa:</p>\n<ol>\n<li>\n<p>Debes agregar dos nuevos campos a la clase producto,\n   ambos deben ser enteros sin signo (<code>uint</code>) : <code>likes</code> y <code>department</code>.\n   Es importante que los agregues a la clase en ese orden.</p>\n</li>\n<li>\n<p>Debes crear una instancia de <code>FileStream</code> y asignarla <code>fs</code>.</p>\n</li>\n<li>\n<p>El archivo que vamoa a crear se debe llamar <code>\"products.txt</code></p>\n</li>\n<li>\n<p>Utilizando el separador de barra vertical <code>'|'</code> agrega una l\u00ednea \n   por cada objeto, no se te olvide agregar el salto de l\u00ednea. No\n   debe haber espacio entre los campos, por ejemplo: \n   <pre class=\"highlight\"><code>AAA|DescA|12.22|12|23\nBBB|DescB|32.99|123|23</code></pre></p>\n</li>\n</ol>\n<p>Observa la manera en la que se desecha el archivo, esto \nes distinto a lo que vimos en clase.</p>\n<p>Puedes guardar tu c\u00f3digo temporalmente en\n<a href=\"https://gist.github.com/\" target=\"_blank\">GitHub Gist</a></p>\n<hr />\n<h4>Notas:</h4>\n<p>Para guardar el estado de los productos, utilizaremos una estrategia sencilla \npara separar los campos, vamos a utilizar un caracter especial como separador.\nEn este caso utilizaremos el caracter barra vertical <code>|</code>. Hay otras soluciones\nest\u00e1ndar, por ejemplo, los archivos separados por coma, pero queremos una soluci\u00f3n b\u00e1sica.</p>\n<p>A continuaci\u00f3n se muestra la implementaci\u00f3n del m\u00e9todo <code>SaveProducts</code>. Es un m\u00e9todo\nest\u00e1tico, y solo recibe como par\u00e1metro la lista con los productos que vamos a \nguardar al archivo. En esta primera prueba hemos dejado el nombre del archivo fijo (<em>hard-coded</em>) \ncomo <code>\"products.txt\"</code>, pero es mejor que este valor se reciba como par\u00e1metro (se dejar\u00e1 como ejercicio). </p>\n<p><pre class=\"highlight\"><code class=\"language-csharp\">class ProductDB\n{\n   public static void SaveProducts(List&lt;Product&gt; products)\n   {\n    // Declaramos el FileStream fuera del bloque try \n    // para que sea visible en todo el bloque del m\u00e9todo\n    FileStream fs = null;\n    try {\n       // Instanciamos un objeto de FileStream\n       // Vamos a crear el archivo y vamos a escribir en el\n       fs = new FileStream(\"products.txt\", FileMode.Create, \n                                             FileAccess.Write);\n\n       // Utilizamos 'using' para que se llame a Dispose implicitamente \n       using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n       {\n          foreach (var p in products)\n          {\n              // Escribimos una l\u00ednea con los campos de cada objeto \n              // Separados por un '|'\n              txtOut.WriteLine($\"{p.code}|{p.description}|{p.price}\");\n          }\n       }\n   }\n   // Optamos por llamar explicitamete al Dispose de fs, como ejemplo\n   finally {\n       // Solo se ejecuta si la referencia no es nula\n      if (fs != null)\n          fs.Dispose();\n    }\n  }\n}</code></pre>\nEn el ejemplo utilizamos una instancia de <code>FileStream</code> para especificar el modo y tipo de acceso \nque utilizaremos al manipular el archivo. Esto lo especificamos utilzando las enumeraciones \n<code>FileMode</code> y <code>FileAccess</code>. </p>\n<p>Las opciones para el modo de apertura <code>FileMode</code> son: </p>\n<table>\n<thead>\n<tr>\n<th>Valor</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Append</code></td>\n<td>Abre el archivo si existe y se posiciona al final de este. Si el archivo no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Create</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se sobrescribe.</td>\n</tr>\n<tr>\n<td><code>CreateNew</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>Open</code></td>\n<td>Abre un archivo existente. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>OpenOrCreate</code></td>\n<td>Abre el archivo si existe. Si no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Truncate</code></td>\n<td>Abre un archivo existente y lo trunca a cero bytes. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n</tbody>\n</table>\n<p>Las opciones para el tipo de acceso son <code>FileAccess.Read</code>, <code>FileAccess.Write</code> y <code>FileAccess.ReadWrite</code>, \nindicando las operaciones que vamos a hacer en el archivo. </p>", "reg_exp": ""}