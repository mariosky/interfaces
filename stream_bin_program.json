{"_id": "/program/11e10c5a-f656-11ec-b939-0242ac122334", "uri": "/program/11e10c5a-f656-11ec-b939-0242ac122334", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para guardar una lista de alumnos a un archivo de binario", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Guarda los datos de una lista de alumnos a un archivo binario", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "\npublic class UnitTest1\n{\n    [Fact]\n    public void ConstructorClass()\n    {\n      Alumno p = new Alumno(1, \"NombreA\", 90.22m);\n      Assert.Equal(\"NombreA\",p.nombre);\n      Assert.Equal(1, p.id);\n      Assert.Equal(90.22m,p.calificaci\u00f3n);\n    }\n\n    [Fact]\n    public void SaveAlumnosTxt()\n    {\n      List<Alumno> alumnos = new();\n      alumnos.Add(new Alumno(1, \"NombreA\", 82.22m));\n      alumnos.Add(new Alumno(2, \"NombreB\", 92.22m));\n      alumnos.Add(new Alumno(3, \"NombreC\", 32.22m));\n    \n      AlumnoDB.SaveAlumnosBin(alumnos, \"alumnos.dat\");\n\n      List<Alumno> alumnosFF = new();\n      alumnosFF = ReadAlumnosBin();\n      Assert.True(alumnosFF.Count > 0, \"El archivo no contiene registros!\");\n      Assert.Equal(1, alumnosFF[0].id);\n      Assert.Equal(2, alumnosFF[1].id);\n      Assert.Equal(3, alumnosFF[2].id);\n      \n    }\n\n    private static List<Alumno> ReadAlumnosBin()\n    {\n        List<Alumno> alumnos = new();\n        FileStream? fs = null;\n        try {\n            fs = new FileStream(\"alumnos.dat\", FileMode.Open, FileAccess.Read);\n            using(BinaryReader binIn = new BinaryReader(fs, Encoding.UTF8))\n            {\n                while (binIn.PeekChar() != -1)\n                {\n                    int id = binIn.ReadInt32(); \n                    string name = binIn.ReadString();\n                    decimal cali= binIn.ReadDecimal();\n                    Console.Write($\"{id}{name}{cali}\");\n                    alumnos.Add(new Alumno(id, name, cali));\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n        return alumnos;\n    }\n\n}\n", "initial_code": "using System.Text;\n\npublic class Alumno\n{\n    public int id;\n    public string nombre;\n    public decimal calificaci\u00f3n;\n\n    // Agrega el constructor\n}\n\npublic class AlumnoDB\n{\n    public static void SaveAlumnosBin(List<Alumno> alumnos, string path)\n    {\n            // El nombre del archivo nos lo env\u00edan en el par\u00e1metro path\n            // El archivo puede ser que exista previamente\n            using(FileStream fs = new FileStream( ,  , \n                        FileAccess.Write))\n            using(BinaryWriter binOut = new BinaryWriter(fs, Encoding.UTF8))\n            {\n                //Debes iterar por la lista que nos han enviado como par\u00e1metro\n                //Escribe al stream en binario los campos de cada alumno\n                //En el mismo orden que en la clase\n\n            }\n    }\n}\n", "instructions": "<h3>Guarda objetos de la clase Alumno a un archivo binario</h3>\n<p>Sigue estos pasos para completar el programa:</p>\n<ol>\n<li>\n<p>Debes completar el programa agregando el constructor \n   de la clase Alumno, incializando todos los campos.</p>\n</li>\n<li>\n<p>Completar los par\u00e1metros del constructor de <code>FileStream</code>.</p>\n</li>\n<li>\n<p>Itera por la lista de alumnos agregando el estado de cada \n   alumno al archivo binario. Recuerda que debas hacer en el mismo orden\n   en el que se especifican en la clase. </p>\n</li>\n</ol>\n<p>Observa el uso de la construcci\u00f3n <code>using</code> para <code>FileSrteam</code> y <code>BinaryWriter</code>.</p>\n<p>Puedes guardar tu c\u00f3digo temporalmente en\n<a href=\"https://gist.github.com/\" target=\"_blank\">GitHub Gist</a></p>\n<hr />\n<h4>Notas:</h4>\n<p>En la salida de <strong>errores de compilaci\u00f3n</strong> ahora se incluye el n\u00famero de l\u00ednea\ny columna d\u00f3nde sucede error. Si el n\u00famero de l\u00ednea es mayor a las l\u00edneas de tu\nprograma, significa que tu c\u00f3digo compila correctamente, pero ocasiona errores\nen otras partes del programa. </p>\n<p>En el ejemplo utilizamos una instancia de <code>FileStream</code> para especificar el modo y tipo de acceso \nque utilizaremos al manipular el archivo. Esto lo especificamos utilizando las enumeraciones \n<code>FileMode</code> y <code>FileAccess</code>. </p>\n<p>Las opciones para el modo de apertura <code>FileMode</code> son: </p>\n<table>\n<thead>\n<tr>\n<th>Valor</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Append</code></td>\n<td>Abre el archivo si existe y se posiciona al final de este. Si el archivo no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Create</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se sobrescribe.</td>\n</tr>\n<tr>\n<td><code>CreateNew</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>Open</code></td>\n<td>Abre un archivo existente. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>OpenOrCreate</code></td>\n<td>Abre el archivo si existe. Si no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Truncate</code></td>\n<td>Abre un archivo existente y lo trunca a cero bytes. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n</tbody>\n</table>\n<p>Las opciones para el tipo de acceso son <code>FileAccess.Read</code>, <code>FileAccess.Write</code> y <code>FileAccess.ReadWrite</code>, \nindicando las operaciones que vamos a hacer en el archivo. </p>", "reg_exp": ""}