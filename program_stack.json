{"_id": "/program/e2210c5a-f656-11ec-b939-0242ac122333", "uri": "/program/e2210c5a-f656-11ec-b939-0242ac122333", "publisher": null, "level": "avanzado", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa la implementaci\u00f3n de la pila gen\u00e9rica Stack<T>", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Pila Gen\u00e9rica", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "public class UnitTest1\n{\n    [Fact]\n    public void PushPopStack()\n    {\n       Stack<int> pila = new Stack<int>(5);\n       pila.Push(5);\n       Assert.Equal(5, pila.Pop()); \n    }\n\n    [Fact]\n    public void PopStack()\n    {\n       Stack<int> pila = new Stack<int>(5);\n       pila.Push(5);\n       pila.Pop();\n\n       Assert.Throws<InvalidOperationException>(()=>pila.Pop()); \n    }\n\n    [Fact]\n    public void PushStack()\n    {\n       Stack<int> pila = new Stack<int>(2);\n       pila.Push(5);\n       pila.Push(5);\n       Action testCode = () => pila.Push(0);\n       StackOverflowException exception = Assert.Throws<StackOverflowException>(testCode); \n       Assert.Equal(\"La pila est\u00e1 llena\",exception.Message);\n    }\n}\n", "initial_code": "\nclass Stack<T>\n{\n private readonly int ;\n private int StackPointer = 0;\n\n private [] Items;\n\n public Stack():this(5){}\n public Stack(int size){\n        this.Size = size;\n        Items = new int[size];\n }\n \n public void Push(T item){\n     if (StackPointer >= Size)\n        throw new StackOverflowException(\"La pila est\u00e1 llena\");\n     // Completar \n     // Agregar elementos al arrglo en la posici\u00f3n del StackPointer\n     // Incrementar el StackPoiner en uno\n }\n public T Pop()\n {\n     // Completar\n     // Primero debemos decrementar el StackPointer\n\n    if (StackPointer >= 0)\n     // Completar\n     // Si estamos en una posici\u00f3n v\u00e1lida regresamos el Item en esa posici\u00f3n \n    else\n    {\n    StackPointer = 0;\n    throw new InvalidOperationException(\"La pila est\u00e1 vac\u00eda\");\n    }\n }\n}\n\n\n", "instructions": "<h3>Implementa la estructura Stack Gen\u00e9rica</h3>\n<p>Completa y cambia el tipo de dato de alg\u00fan elemento\nde la clase Stack, para que funcione como eso, una pila.</p>\n<p>Si te fijas, la clase es Gen\u00e9rica y utilizamos el par\u00e1metro de \ntipo <code>T</code>. El funcionamiento de la pila para utilizar enteros\nse muestra a continuaci\u00f3n:</p>\n<pre><code class=\"language-csharp\">class Program{\n    static void Main(){\n        Console.WriteLine(&quot;Pila de tama\u00f1o 5&quot;);\n    // Una pila para utilizar objetos tipo entero\n        Stack&lt;int&gt; pila = new Stack&lt;int&gt;();\n        pila.Push(3);\n        pila.Push(4);\n        pila.Push(5);\n\n        Console.WriteLine(pila.Pop());\n        Console.WriteLine(pila.Pop());\n        Console.WriteLine(pila.Pop());\n        // Hay una excepci\u00f3n si queremos extrer otro elemento \n        // de la pila\n        Console.WriteLine(pila.Pop());\n    }\n}\n</code></pre>", "reg_exp": ""}