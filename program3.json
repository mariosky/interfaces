{"_id": "/program/e2210c5a-f324-11ec-b939-0242ac122973", "uri": "/program/e2210c5a-f324-11ec-b939-0242ac122973", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para que funcione correctamente", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Completa el programa implementaci\u00f3n de m\u00faltiples interfaces", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "public class InterfaceTest\n{\n    [Fact]\n    public void Interface()\n    {\n        \n        Alumno a = new Alumno() {Nombre=\"Juan\"};\n\n        ISaludador sa  = a as ISaludador; \n        Assert.NotNull(sa);\n        IEstudioso est =  a as IEstudioso; \n        Assert.NotNull(est);\n        IAmigable ami  = a as IAmigable;\n        Assert.NotNull(ami);\n    }\n\n    [Fact]\n    public void ISaludador()\n    {\n        \n        Alumno a = new Alumno() {Nombre=\"Juan\"};\n        ISaludador sa  = a as ISaludador; \n        using (StringWriter s = new StringWriter())\n            {\n                Console.SetOut(s);\n                \n                sa.Saluda();\n\n                var result = s.ToString().Trim().Replace(\"\\r\",\"\");\n                Assert.Equal(\"Hola\", result );\n            }\n\n    }\n\n    [Fact]\n    public void IAmigable()\n    {\n        \n        Alumno a = new Alumno() {Nombre=\"Juan\"};\n\n        IAmigable ami  = a as IAmigable; \n        using (StringWriter s = new StringWriter())\n            {\n                Console.SetOut(s);\n                \n                ami.Saluda();\n\n                var result = s.ToString().Trim().Replace(\"\\r\",\"\");\n                Assert.Equal($\"{ami.Nombre} dice Hola\", result );\n            }\n\n    }\n\n}\n\n\n\n", "initial_code": "interface ISaludador\n {\n     void Saluda();\n }\n\ninterface IEstudioso\n {\n\n  void Estudia();\n\n }\n\ninterface IAmigable\n {\n   string? Nombre { get; set; } \n   bool EsAmigo(string nombre); \n   void Saluda();\n }\n\nclass Alumno : IAmigable, ISaludador,  IEstudioso \n  { \n\n\n\n\n  }\n\n", "instructions": "<h3>Completa la clase Alumno, implementando las interfaces especificadas</h3>\n<p>El m\u00e9todo <code>void Saluda()</code> de <code>ISaludador</code> debe imprimir <code>\"Hola\"</code>, mientras \nque el debe <code>IAmigable</code> debe imprimir <code>$\"{Nombre} dice Hola\"</code>.</p>", "reg_exp": ""}