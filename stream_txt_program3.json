{"_id": "/program/eeef9c5a-f656-11ec-b939-0242ac122333", "uri": "/program/eeef9c5a-f656-11ec-b939-0242ac122333", "publisher": null, "level": "intermedio", "rights": "Attribution-ShareAlike 4.0 International", "description": "Completa el programa para leer una lista de productos almacenados archivo de texto", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["completa", "csharp"], "image_url": null, "title": "Lee los productos almacenados en un archivo de texto", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "\npublic class Product\n{\n    public string? code;\n    public string? description;\n    public decimal? price;\n    public uint? likes;\n    public uint? department;\n\n    public Product(string? c, string? d, decimal? p, uint? l, uint? de)\n    {\n        code = c; description = d; price = p; \n        likes = l; department = de;\n    }\n\n    public override string ToString()\n    {\n        return String.Format($\"{code} {description} {price}\");\n    }\n}\n\npublic class UnitTest1\n{\n\n    [Fact]\n    public void ReadProductsTxt()\n    {\n      List<Product> products = new();\n      products.Add(new Product(\"AAA\", \"DescA\", 12.22m, 12,  23));\n      products.Add(new Product(\"BAA\", \"DescB\", 12.22m, 12,  23));\n      products.Add(new Product(\"CAA\", \"DescC\", 12.22m, 12,  23));\n    \n      SaveProducts(products);\n\n      List<Product> productsFF = new();\n      productsFF = ProductDB.ReadProducts();\n      Assert.Equal(\"AAA\", productsFF[0].code);\n      Assert.Equal(\"BAA\", productsFF[1].code);\n      Assert.Equal(\"CAA\", productsFF[2].code);\n\n      foreach(var p in productsFF)\n          Console.WriteLine(p);\n    }\n    \n    private static void SaveProducts(List<Product> products)\n    {\n        FileStream? fs = null;\n        try {\n            fs = new FileStream(\"products.txt\", FileMode.Create, FileAccess.Write);\n            using(StreamWriter txtOut = new StreamWriter(fs, Encoding.UTF8, 512))\n            {\n                foreach (var p in products)\n                {\n                    txtOut.WriteLine($\"{p.code}|{p.description}|{p.price}|{p.likes}|{p.department}\");\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n    }\n}\n\n", "initial_code": "using System.Text;\n\npublic class ProductDB\n{\n    public static  List<Product> ReadProducts()\n    {\n        // Lista que vamos a regresar\n        List<Product> prods = new();\n        // Creamos la referencia fs\n        FileStream? fs = null;\n        try {\n            // Crea una instancia de FileStream\n            // Completa las enumeracions FileMode y FileAccess\n            \n            fs = new FileStream(\"products.txt\", FileMode. , FileAccess.);\n            using(StreamReader txtIn = new StreamReader(fs, Encoding.UTF8))\n            {\n                while (txtIn.Peek() != -1)\n                {\n                string? row = txtIn.ReadLine();\n                // leemos hasta el fin de archivo\n                if (row is not null)\n                    {\n                    // Separa los campos de cada rengl\u00f3n\n                    // en un arreglo llamado cols\n                    // string?[] cols =  \n\n                    string? code = cols[0];\n                    string? description = cols[1];\n                    decimal? price = decimal.Parse(cols[2]!);\n                    // Agrega las variables que falten\n\n                    // Agregamos un nuevo producto a la lista\n                    // No modificar esta l\u00ednea\n                    prods.Add(new Product(code,description, price, \n                                likes, department));\n                    }\n                }\n            }\n        }\n        finally {\n            if (fs != null)\n                fs.Dispose();\n        }\n\n        // REGRESA LA LISTA\n\n    }\n}\n", "instructions": "<h3>Lee objetos de la clase <code>Product</code> desde un archivo de texto</h3>\n<p>El archivo <code>\"products.txt</code> contiene el estado \nde una colecci\u00f3n de objetos de la clase <code>Product</code>:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Product</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">string?</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">string?</span><span class=\"w\"> </span><span class=\"n\">description</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">decimal?</span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">uint?</span><span class=\"w\"> </span><span class=\"n\">likes</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">uint?</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nf\">Product</span><span class=\"p\">(</span><span class=\"kt\">string?</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">string?</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">decimal?</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint?</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint?</span><span class=\"w\"> </span><span class=\"n\">de</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">description</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">likes</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">de</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">override</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"nf\">ToString</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"p\">.</span><span class=\"n\">Format</span><span class=\"p\">(</span><span class=\"s\">$&quot;{code} {description} {price}&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>El archivo de texto tiene el siguiente formato:</p>\n<div class=\"highlight\"><pre><span></span><code>AAA|DescA|12.22|12|23\nBBB|De\n</code></pre></div>\n<p>Debes completar el m\u00e9todo para que <strong>regrese</strong> una lista de tipo <code>List&lt;Product&gt;</code>\ncon los objetos que se haz le\u00eddo del archivo.</p>\n<p>Para hacer la lectura utilizaremos una instancia de <code>StreamReader</code>.</p>\n<p>Puedes guardar tu c\u00f3digo temporalmente en\n<a href=\"https://gist.github.com/\" target=\"_blank\">GitHub Gist</a></p>\n<h4>Notas:</h4>\n<p>En el ejemplo utilizamos una instancia de <code>FileStream</code> para especificar el modo y tipo de acceso \nque utilizaremos al manipular el archivo. Esto lo especificamos utilzando las enumeraciones \n<code>FileMode</code> y <code>FileAccess</code>. </p>\n<p>Las opciones para el modo de apertura <code>FileMode</code> son: </p>\n<table>\n<thead>\n<tr>\n<th>Valor</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Append</code></td>\n<td>Abre el archivo si existe y se posiciona al final de este. Si el archivo no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Create</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se sobrescribe.</td>\n</tr>\n<tr>\n<td><code>CreateNew</code></td>\n<td>Crea un nuevo archivo. Si el archivo ya existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>Open</code></td>\n<td>Abre un archivo existente. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n<tr>\n<td><code>OpenOrCreate</code></td>\n<td>Abre el archivo si existe. Si no existe, se crea uno nuevo.</td>\n</tr>\n<tr>\n<td><code>Truncate</code></td>\n<td>Abre un archivo existente y lo trunca a cero bytes. Si el archivo no existe, se genera una excepci\u00f3n.</td>\n</tr>\n</tbody>\n</table>\n<p>Las opciones para el tipo de acceso son <code>FileAccess.Read</code>, <code>FileAccess.Write</code> y <code>FileAccess.ReadWrite</code>, \nindicando las operaciones que vamos a hacer en el archivo. </p>", "reg_exp": ""}